In part 6, we were asked to take the coverage chart and return the minimized function. To do this we had to implement an algorithm that:
1- Detects and removes the dominating columns 
2- Detects and removes the dominated rows
3- Removes and stores the single number of one's in each column in a vector
4- Use the given EPIs from previous functions and combine them with the remaining PIs of the coverage chart
5-Transfer the combined vector to the correct format used in the K-maps generator.

I implemented the needed functionalities using 6 different procedures and worked on the chart using a vector<pair<string, vector<int>> .This coverage chart had its first pair as a vector<string> representing the keys and the second pair vector<int> representing the minterms covered by each row of these keys. I was able to output the required minimized expression by manipulating over this coverage chart using loops and conditions. 

Conflicts faced:
1-Looping over vector<pair<string, vector<int>> columns and rows correctly to find which are dominated/dominating
2-Coming up with a simple algorithm that returns if rows/columns are dominated/dominating
3-Correctly erase and count for duplicates as well as looping backward 
4-Repeatedly check for single ones after removing columns/rows to output the correct minimized dunction

In part seven  we were asked to output the K-map and the covers of the minimized expression. To do this we have to:
1-Combine both EPIS and PIs in one vector to contain the needed covers
2-Transform the EPIs & PIS to strings of characters(variables)  to be able to print the covers using K-maps
3-Storing all possible covers that could be found on K-map.
3-Accommodate for different numbers of variables as they would output distinct k-maps sizes and covers.

Conflicts faced:
1-Thinking of all possibilities and listing them correctly.
2-Merging with existing different vectors to use the correct one for the K-map covers.
3-Algorithm is compatible for any number of variables even if the number of variables in minimized functions < the number of variables in 4-the original input.

Test Cases

1-aaa+a' -To make sure that it runs correctly for duplicates
2-a'''+ab -To handle the number ' and accommodate it accordingly
3-(a+b)+(b c) -To make sure it takes either the correct sop or pos format only.
3-ab'+20 -Only takes valid inputs from users
4-1001 -Will not accept binary inputs 
5-(a+b)(c+d') - Validating  Pos
6-c'd+cd'+c'd'+cd - Works even when boolean expression is equal to 1
7-a'b'c'd'e'f' + ab'c'd'e'f' + a'bc'd'e'f' + abc'd'e'f' + a'b'cd'e'f' + ab'cd'e'f' + a'bcd'e'f' - Works and does not print K-map
8-abc+bcd' - Normal test
9-a'bc'd'+ab'c'd'+a'bcd'+ab'cd'+abcd'+abc'd'+abcd+abcd'+a'bcd'+abcd -Only EPIS are minimized function
10-a - Test for logic circuit when it is directly connected with output. 

