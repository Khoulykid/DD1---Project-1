   In the second question of the programming part, we had to build a truth table representing the minterms and maxterms of the function that we get. The conflicts that we had to conquer were as follows:
1. Size (number of rows) of the Truth Table.
2. Knowing what our variables are and their number (as in index).
3. How to make the Truth Table show the minterms as 0000, 0001 and etc.
4. Setting our output as 1 at the correct minterm.


   First of all, we chose a map of character and vector of integers as our truth table; the character representing the variable name and being the key index in the map, and its vectors being the frequency to show when it is ON or OFF in the table. We used bit manipulation to get the number of rows in the Truth Table, by left-shifting 2 by the number of inputs subtracted by 1. So if there is only 1 input for example, we would get 2 rows. 4 rows for 2 inputs etc. We chose bit manipulation as it takes less complexity rather than using the power function in C. Moreover, in the first function, we used a STL Set of characters to store the variables, as there will be no repeated variables in the set, and it’ll also sort them. Then by filling the Truth Table (excluding the output for now) we noticed that with each 0, a certain number of rows away, there becomes a 1. Such sequence changes to each column, so we implemented an algorithm accordingly.
   To set the output accordingly, we added a new column at the Truth Table labeling it as ‘X’.  We used an STL vector of strings prepared at the input that holds each Sum/Product as an element. Furthermore, we prepared a boolean variable that represents whether the input is in the form of Sum of Products or Product of Sums. If the input was a Sum of Products, we first iterate through the Products we have, and then loop over each row to check if the output should become ON or OFF. We first check if the Output is already ON or not, since if it is already ON we do not want to change it. We check each character in the Product, and we also check if there is a /’ after it, to check if it is negated or not. If the variable is the same as in the Truth Table, in other terms if it is negated in the Product and it is 0 in the Truth Table, then we use an AND operation with an integer variable called final that is initialized as 1. After the Product, we change the output accordingly, by equalizing the Output with the variable “final”. For the Product of Sums, we first set all my Outputs as ON (1) and then do the same iteration, however we invert the conditions.
   To show the Canonical Sum of Products, we had to iterate through the table and check whenever the Output is 1. If the Output is 1 (or true/On), we iterate over the characters in the Set and if the variable is 1, we add it into a string, if it is 0, we add it with an inverter (\’) behind it. After that we insert the string to a vector of strings that shows the Sum of Products. For the Product of Sums, we iterate through the Truth Table searching for 0 in the output, if we do that we do practically the same; we loop through the row and check if the variable is ON, we add it to a string with a + after it. If it is OFF we add an inverter. Then we print them all using Loops.


Conflicts faced in the code:
* I used to change the Output even though it was already true.
   * When a product would produce a true, another product would be false at the exact minterm, so it would overwrite the original value to 0 instead of 1, even though it should be true.
* Iterating over the set of characters.
   * Sets cannot be accessed through indexes and square brackets, and can only be accessed through iterator pointers.
How I overcame the conflicts:
* I check if Output is already 0 or 1 before altering it using a simple if statement.
* Learned the syntax online of iterating through sets online and trained on how to iterate through sets.


Complexity:
* Time: O(m * 2n-1); m being the number of products and n being the number of variables.
* Space: O(n*2n-1); n being the number of variables.


   In the third question of the programming part. We had to generate all the Prime Implicants. I had to do the following:
1. Write the minterms currently as binary expressions.
2. Sort them by the number of 1’s.
3. Divide them into groups depending on the number of 1’s in each.
4. Comparing each expression in each group by all the expressions in the following group.
5. Remove the used expressions/covers.
6. Track and print the minterms each PI covers.


   We started with initializing an STL vector of string called “terms” to store the first binary expressions as a form of strings. We used string so that we can add ‘-’ in the binary expression/cover. We iterated through the whole Truth Table, and whenever the Output was 1, we then added the minterm in a string and then added it to the vector. We also track the index and add the index in a vector of int, to represent the minterm each cover represents. 
   After that, we added the terms into a vector of sets (called sets), each set representing the expressions depending on their number of 1’s. For example, sets[0] would contain all the expressions carrying no 1’s. We filtered through the terms and added them according to the number of 1’s in them. Into the comparison, we iterated through the vector of sets, comparing each set with its following. We just used the simple “i+1” trick to compare each. However, we had to insert a new set each time insert the product of the comparison into. We then kept iterating over each element in the set with each element in its following set, checking if the logical distance is only 1, we then change it to ‘-’. If we find 2 expressions and we add the outcome of their comparison, we push both of these expressions in another vector of strings to remove them from the final list in the end.
   In the end, I had to delete the redundant empty sets for less memory usage. Empty sets are the product of creating a set in case there is similarity between 2 existing sets, but turns out there isn’t. After that, an iteration is performed to remove all the used implicants, as they are not prime. We then add all the covers into a vector of strings (It was requested in the 4th function for simplicity). Finally, we compare them with the original terms, to check which minterms they cover, and add them into a vector of vectors of integers. The first index represents which cover, and 2nd index represents the minterms.


Conflicts faced in the code:
* Deleting the used covers.
   * It would crash very often, and I couldn’t remove the implicant right away after using it, as I might combine it with another implicant in the group.
* Checking what minterms each Implicant covers.
   * It was difficult to track the minterms each implicant covered in the iteration. In further context, when combining covers, the minterms would also combine and checking their indexes would become tiresome and difficult.
How I overcame the conflicts:
* Stored all the used implicants in the end and removed it from the final list.
* Compared all the final Prime Implicants with the original terms that each represented only 1 minterm. If the only difference was ‘-’, then that PI would also cover that term.


Complexity:
* Time: O(nn); n being the number of rows in the truth table.
* Space: O(nn); n being the number of rows in the truth table.